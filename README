 Renesas EMEV Open Source Project (ROSP)

-----------------------

1) Download full AOSP source code following the steps in:

 http://source.android.com/source/downloading.html

A customized version of the AOSP 2.3.6_r1 manifest can be found at:

 https://github.com/ffxx68/Renesas-manifest

so, the "repo init" step should be made using this manifest:

 repo init -u git@github.com:ffxx68/Renesas-manifest -b android-2.3.6_r1

In .repo/manifests/deafult.xml, customized projects are linked to the corresponding ffxx68 repositories, in place of the default Android ones.
The rest are pulled off the standard googlesource repositories, as usual in AOSP.

Note - downloading the full AOSP source may take hours to complete, even on a fast connection.

It's also useful to define an environment variable, to refer to the AOSP entry dir. 
E.g. I downloaded the AOSP source under my local home, in Android/aosp. Then:

 export AOSP=~/Android/aosp

-----------------------

2) The following customized projects make up our ROSP:

Project                              Path                  
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ffxx68/Renesas-device_emev           device/renesas/emev   
ffxx68/Renesas-hardware_emev         hardware/renesas/emev
ffxx68/Renesas-bionic                bionic
ffxx68/Renesas-frameworks_base       frameworks/base       
ffxx68/Renesas-build                 build
ffxx68/Renesas-system_core           system/core
ffxx68/Renesas-system_vold           system/vold

-----------------------

3) Notes about projects

I meant "ffxx68/Renesas-device_emev" to be the "entry point" to the ROSP, with the present README explaining the basic steps to build the firmware update package from scratch.

As "device/renesas/emev" and "hardware/renesas/emev" didn't exist in the AOSP, these were created from scratch and pushed on the ffxx68 GitHub account.

Others were forked from the corresponding android/platform_... the Gingerbread branch. 

The "frameworks/base" and "build" were modified only to allow compilation on Ubuntu 11.10 64-bit, after these suggestions:

 http://groups.google.com/group/android-building/browse_thread/thread/7b7d307c8038aab9
 http://code.google.com/p/android/issues/detail?id=20795

Each projects has a "MyPad" branch, to track ROSP changes.

NOTE - The procedure I followed, for each project was the following:

 - In GitHub, fork android/platform_<abc>, Gingerbread branch, to ffxx68
 - In GitHub, admin->rename ffxx68/platform_<abc> to ffxx68/Renesas-<abc>
 - cd <abc-path>
 - git branch MyPad
 - git checkout MyPad
 - Applied here whatever customization is needed for the Renesas EMEV
 - git remote add github git@github.com:ffxx68/Renesas-<abc>.git
 - git push -u github MyPad

-----------------------

4) How to push changes back to GitHub

If you change anything, to push it back onto our GitHub repository you would do:

 git add <whatever file you changed>
 git commit -m "Leave your commit comments here"
 git push -u github MyPad

This woud require you to have an account registered on GitHub, where you may have forked the project to.
Find help oh GitHub, for admin and access details. E.g.

 http://help.github.com/send-pull-requests/

If you find it easier, use our ROSP discussion group to let us have your patches instead:

 https://groups.google.com/forum/#!forum/renesas-emev-osp
 
Use the same group if you think anything in the whole process may be improved. Suggestions are welcome!

-----------------------

5) Getting OMX and SGX firmware blobs and libraries

The script

 $AOSP/device/renesas/emev/pull_firmware.sh

can be used to pull off the real device the firmware binaries and libraries managing:

 - the video encoder/decoder (OMX)
 - 3D-graphics accelerator (SGX)

These are released only as pre-compiled libraries, source code being proprietary.

The device must have a stock 2.3 Android on board (e.g. the "1220" build), to pull these files from, and should be running and connected through USB to your build host.

Try "adb shell" first, to verify if the connection works properly.

The script puts files in sgx/ and omf/ found under $AOSP/device/renesas/emev. The Android build process then moves files under the epxected target directories.

You need to run this script only once, as these files aren't touched by the build procedure.

The script assumes $AOSP is set with the path to aosp top dir.

-----------------------

6) Building Android

Once you have your code, you would build Android with:

 cd $AOSP
 . build/envsetup.sh

including device/htc/passion/vendorsetup.sh
including device/renesas/emev/vendorsetup.sh
including device/samsung/crespo4g/vendorsetup.sh
including device/samsung/crespo/vendorsetup.sh

 lunch full_renesas_emev-eng

PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=2.3.6
TARGET_PRODUCT=full_renesas_emev
TARGET_BUILD_VARIANT=eng
TARGET_SIMULATOR=false
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_ARCH=arm
HOST_ARCH=x86
HOST_OS=linux
HOST_BUILD_TYPE=release
BUILD_ID=GRK39F

 time make -j2 showcommands 2>&1 | tee make.log
...
(took about 1-1.5 hours to make, on my 2x2.4GHz, 4 Gb Ubuntu VM)
...
Installed file list: out/target/product/emev/installed-files.txt

-----------------------

7) Packaging files

The script

 $AOSP/device/renesas/emev/pack.sh

collects the complete Android file system and then packs it into: 

 $AOSP/android-fs4.tar.gz

The script assumes $AOSP and $KERNEL variables are set, pointing to the aosp and kernel source root dirs respectively.

Then, the u-boot and kernel (uImage) need to be assembled manually into a firmware update SD-card. Replace the files in a firmware update package from the vendor, or follow the instructions to create a bootable SD-card, from https://github.com/ffxx68/Renesas-BootSD

-----------------------

8) About Google Apps

The AOSP source code comes naked of the most common Google Apps, fond in any tytpical device.

These include Market (now Play), GMail, Maps, etc.

Packages with these apps can be found on the net. E.g. see:

 http://wiki.rootzwiki.com/Google_Apps

The pack.sh script assumes that you have downloaded these separately into a directory named "GoogleApps" under $AOSP/device/renesas/emev

Note - this is NOT a mandatory step, to complete a working build.

-----------------------

9) The bootloader 

The internals of the bootloader and the corresponding source code is found at:

 https://github.com/ffxx68/RenesasEV2-bootloader

The code is meant for a develpment board and it isn't tested yet for being used in a real tablet, athough the differences should be minor. For the time being, a "stock" bootlader (from the tablet vendor) is being used for our tests, until the Open Sorce bootloader is ported and tested for tablets.



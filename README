 Renesas EMEV Open Source Project (ROSP)

-----------------------

1) Download full AOSP source code following the steps in:

 http://source.android.com/source/downloading.html

A customized version of the AOSP 2.3.6_r1 manifest can be found at:

 https://github.com/ffxx68/Renesas-manifest

so, the "repo init" step should be made using this manifest:

 repo init -u git@github.com:ffxx68/Renesas-manifest -b android-2.3.6_r1

In .repo/manifests/deafult.xml, customized projects are linked to the corresponding ffxx68 repositories, in place of the default Android ones.
The rest are pulled off the standard googlesource repositories, as usual in AOSP.

Note - downloading the full AOSP source may take hours to complete, even on a fast connection.

It's also useful to define an environment variable, to refer to the AOSP entry dir. 
E.g. I downloaded the AOSP source under my local home, in Android/aosp. Then:

 export AOSP=~/Android/aosp

-----------------------

2) The following customized projects make up our ROSP:

Project                              Path                  
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ffxx68/Renesas-device_emev           device/renesas/emev   
ffxx68/Renesas-hardware_emev         hardware/renesas/emev
ffxx68/Renesas-bionic                bionic
ffxx68/Renesas-frameworks_base       frameworks/base       
ffxx68/Renesas-build                 build
ffxx68/Renesas-system_core           system/core
ffxx68/Renesas-system_vold           system/vold

-----------------------

3) Notes about projects

I meant "ffxx68/Renesas-device_emev" to be the "entry point" to the ROSP, with the present README explaining the basic steps to build the firmware update package from scratch.

As "device/renesas/emev" and "hardware/renesas/emev" didn't exist in the AOSP, these were created from scratch and pushed on the ffxx68 GitHub account.

Others were forked from the corresponding android/platform_... the Gingerbread branch. 

The procedure I followed, for each project was:

 - In GitHub, fork android/platform_<abc>, Gingerbread branch, to ffxx68
 - In GitHub, admin->rename ffxx68/platform_<abc> to ffxx68/Renesas-<abc>
 - cd <abc-path>
 - git branch MyPad
 - git checkout MyPad
 - Applied here whatever customization is needed for the Renesas EMEV
 - git remote add github git@github.com:ffxx68/Renesas-<abc>.git
 - git push -u github MyPad

If any other project requires customization, apart from the above ones, I can create another project on ffxx68 in the same way.

The "frameworks/base" and "build" were modified only to allow compilation on Ubuntu 11.10 64-bit, after these suggestions:

 http://groups.google.com/group/android-building/browse_thread/thread/7b7d307c8038aab9
 http://code.google.com/p/android/issues/detail?id=20795

Each projects has a "MyPad" branch, to track ROSP changes.
 
-----------------------

4) How to pull single projects locally

As "device/renesas/emev" doesn't exist in AOSP, we have to clone it from our (ffxx68) GitHub:

 cd $AOSP
 git clone git@github.com:Renesas-device_emev.git device/renesas/emev

The others would be pulled locally from our GitHub projects, i.e.

 cd $AOSP/<Path>
 git branch MyCustomPad
 git checkout MyCustomPad
 git remote add github git@github.com:<Project>.git
 git fetch github
 git merge github/MyPad

This way, "git fetch & merge" would merge our GithHub code with latest AOSP version too

-----------------------

5) How to push changes back to GitHub

If you change anything, to push it back onto our GitHub repository you would do:

 git add <whatever file you changed>
 git commit -m "Leave your commit comments here"
 git push -u github MyPad

This woud require you to have an account registered on GitHub, where you may have forked the project to.
Find help oh GitHub, for admin and access details. E.g.

 http://help.github.com/send-pull-requests/

If you find it easier, use our ROSP discussion group to let us have your patches instead:

 https://groups.google.com/forum/#!forum/renesas-emev-osp
 
Use the same group if you think anything in the whole process may be improved. Suggestions are welcome!

-----------------------

6) Building Android

Once you have your code, you would build Android with:

 cd $AOSP
 . build/envsetup.sh

including device/htc/passion/vendorsetup.sh
including device/renesas/emev/vendorsetup.sh
including device/samsung/crespo4g/vendorsetup.sh
including device/samsung/crespo/vendorsetup.sh

 lunch full_renesas_emev-eng

PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=2.3.6
TARGET_PRODUCT=full_renesas_emev
TARGET_BUILD_VARIANT=eng
TARGET_SIMULATOR=false
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_ARCH=arm
HOST_ARCH=x86
HOST_OS=linux
HOST_BUILD_TYPE=release
BUILD_ID=GRK39F

 time make -j2 showcommands 2>&1 | tee make.log
...
(took about 1-1.5 hours to make, on my 2x2.4GHz core, 4 Gb RAM Ubutnu VM)
...
Installed file list: out/target/product/emev/installed-files.txt

-----------------------

8) Getting OMX, SGX, WiFi firmware blobs and libraries

The script

 $AOSP/device/renesas/emev/pull_firmware.sh

can be used to pull off the real device the firmware binaries and libraries managing:

 - the video encoder/decoder (OMX)
 - 3D-graphics accelerator (SGX)
 - Broadcom WiFi dongle

All of these are released only as pre-compiled libraries, source code being proprietary.

The device must have a stock 2.3 Android on board (e.g. the "1220" build), to pull these files from, and should be running and connected through USB to your build host.

Try "adb shell" first, to verify if the connection works properly.

The script creats a new "firmware" dir, under $AOSP/device/renesas/emev, to stores the files.

You need to run this script only once, as these files aren't touched by the build procedure.

The script assumes $AOSP is set with the path to aosp top dir.

-----------------------

9) Packaging files

The script

 $AOSP/device/renesas/emev/pack.sh

collects the complete Android file system and the firmware files (from pull_firmware.sh) and then packs them in 

 $AOSP/android-fs4.tar.gz

The script assumes $AOSP is set with the path to aosp top dir.

Then, the u-boot and kernel (uImage) need to be assembled manually into a firmware update SD-card.

Note - The complete bootloader procedure is also described in

 https://github.com/ffxx68/RenesasEV2-bootloader

-----------------------

10) Test with a bootable SD-card

If you wish to test a build without replacing the NAND-resident firmware, refer to the project README at:

 https://github.com/ffxx68/Renesas-BootSD

 

